import json


class ITEvent:

    def __init__(self, name, baseprice, duration):
        if not isinstance(name, str):
            raise Exception("Error: Subject must be of type str")
        else:
            self.name = name

        if not isinstance(baseprice, int | float):
            raise Exception("Error: Baseprice must be a number")
        else:
            self.baseprice = baseprice

        if not isinstance(duration, int):
            raise Exception("Error: Duration must be of type int")
        else:
            self.duration = duration


class Tickets:

    def __init__(self, event, number, factor=1):
        self.factor = factor
        self.tickets = []

        if not isinstance(event, ITEvent):
            raise Exception("Error: Event must be of type vent")
        else:
            self.event = event

        if not isinstance(number, int):
            raise Exception("Error: Number must be of type int")
        else:
            self.number = number

        self.price = event.baseprice * self.factor
        self.tickets.append(self)

    def get_price(self):
        return f'The price of your ticket is {self.price}'

    def get_ticket_by_number(self, number):
        for ticket in self.tickets:
            if ticket.number == number:
                return ticket
        else:
            raise Exception("Error: Incorrect data")

    def serializing(self, path):
        result = ""
        with open(path, 'w') as file:
            for ticket in self.tickets:
                result += json.dump(ticket, file)
        file.write(result)
        return result

    def deserializing(self, path):
        result = ""
        with open(path, 'r') as file:
            for jsontext in file:
                jsonobject = json.loads(jsontext)
                jsonevent = jsonobject["event"]
                event = ITEvent(jsonevent["name"], jsonevent["baseprice"], jsonevent["duration"])
                globals()[jsonobject["type"]](event, jsonobject["number"])
        return result


class RegularTicket(Tickets):

    def __init__(self, event, number, factor=1):
        super().__init__(event, number)
        self.factor = factor

    def __str__(self):
        return f'This is a regular ticket, its price is {self.price}, its number is {self.number}'


class AdvanceTicket(Tickets):

    def __init__(self, event, number, factor=0.6):
        super().__init__(event, number)
        self.factor = factor

    def __str__(self):
        return f'This is an advance ticket, its price is {self.price}, its number is {self.number}'


class StudentTicket(Tickets):

    def __init__(self, event, number, factor=0.5):
        super().__init__(event, number)
        self.factor = factor

    def __str__(self):
        return f'This is a student ticket, its price is {self.price}, its number is {self.number}'


class LateTicket(Tickets):

    def __init__(self, event, number, factor=1.1):
        super().__init__(event, number)
        self.factor = factor

    def __str__(self):
        return f'This is a late ticket, its price is {self.price}, its number is {self.number}'


my_event = ITEvent('Selenium Day Bangalore', 50, 2)
my_ticket = LateTicket(my_event, 9897469764)
print(my_ticket)
print(my_ticket.get_ticket_by_number(9897469764))
my_ticket.serializing('data.json')
my_ticket.deserializing('data.json')
